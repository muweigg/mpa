@import 'variables';
@import 'functions';

@mixin generate-base () {

  #{get-selectors-by-name(row)} {
    box-sizing: border-box;

    @if not($float-layout) {
      display: flex;
      flex-wrap: wrap;
    }

    [class*='#{$prefix}'], [#{remove-last-symbol($prefix)}] {
      @if $float-layout {
        float: left;
      }
      box-sizing: border-box;
    }

    @if $float-layout {
      @include clearfix;
    }
  }
}

@mixin generate-justify () {

  #{get-selectors-by-name(ta-j)} {
    text-align: justify;
    &:after {
      content: '';
      display: inline-block;
      width: 100%;
      height: 0;
      min-height: 0;
      line-height: 0;
      overflow: hidden;
    }
  }

  #{get-selectors-by-name(ta-j-fix)} {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
    padding-top: 0 !important;
    padding-bottom: 0 !important;
    border: 0 !important;
    height: 0 !important;
    min-height: 0 !important;
    line-height: 0 !important;
    display: inline-block !important;
  }
}

@mixin generate-gap ($breakpoint: null) {

  $gap: map-get($breakpoints-gap, $breakpoint);

  @if not($gap) {
    $gap: map-get($breakpoints-gap, default);
  }

  #{get-selectors-by-name(row)} {
    margin-left: -$gap;
    margin-right: -$gap;
    [class*='#{$prefix}'], [#{remove-last-symbol($prefix)}] {
      padding-left: $gap;
      padding-right: $gap;
    }
    #{get-selectors-by-name('&gapless')} {
      margin-left: 0;
      margin-right: 0;
      [class*='#{$prefix}'], [#{remove-last-symbol($prefix)}] {
        padding-left: 0;
        padding-right: 0;
      }
    }
  }
}

@mixin generate-columns ($breakpoint: null) {

  $column-width-index: ();
  $column-offset-index: ();
  $columns: get-columns($columns);

  @each $column in $columns {
    @for $i from 1 through $column {
      $calc-width: 100% / $column * $i;
      $column-width-index: map-set($column-width-index, $calc-width, ());
      $column-offset-index: map-set($column-offset-index, $calc-width, ());
    }
  }

  @each $column in $columns {
    @for $i from 1 through $column {
      $calc-width: 100% / $column * $i;
      $is-exist: map-has-key($column-width-index, $calc-width);
      @if $is-exist {
        $class-name: get-column-selectors(#{$i}-#{$column}, $breakpoint);
        $offset-name: get-column-selectors(#{$i}-#{$column}, $breakpoint, true);
        $column-width-index: update-list-in-map($column-width-index, $calc-width, $class-name);
        $column-offset-index: update-list-in-map($column-offset-index, $calc-width, $offset-name);
      } @else {}
    }
  }

  $column-width-index: update-list-in-map($column-width-index, 100%, get-column-selectors(1, $breakpoint));
  
  @each $width, $classes in $column-width-index {
    #{join($classes, (), comma)} {
      @if not($float-layout) {
        flex-basis: #{$width};
      } @else {
        width: #{$width};
      }
      max-width: #{$width};
    }
  }

  @if $column-offset {
    $column-offset-index: map-remove($column-offset-index, 100%);
    @each $width, $classes in $column-offset-index {
      #{join($classes, (), comma)} {
        margin-left: #{$width};
      }
    }
  }
}

@mixin generate-visible ($breakpoint: null) {
  @if $breakpoint {
    $breakpoint: -#{$breakpoint};
  }

  [hidden#{$breakpoint}], .hidden#{$breakpoint} {
    display: none !important;
  }

  [visible#{$breakpoint}], .visible#{$breakpoint} {
    display: inherit !important;
  }
}

@mixin generate-align ($breakpoint: null) {

  $text-align: (
    text-align: (
      ta-l: left,
      ta-c: center,
      ta-r: right,
      ta-s: start,
      ta-e: end
    )
  );

  $vertical-align: (
    vertical-align: (
      va-t  : top,
      va-tt : text-top,
      va-m  : middle,
      va-bl : baseline,
      va-b  : bottom,
      va-tb : text-bottom,
      va-sup: super,
      va-sub: sub
    )
  );

  $flex-align: ();

  @if not($float-layout) {
    $flex-align: (
      flex: (
        fx-auto: '1 1 auto',
        fx-g   : '1 0 auto',
        fx-s   : '0 1 auto',
        fx-none: '0 0 auto',
      ),
      flex-direction: (
        fxd-c : column,
        fxd-cr: column-reverse,
        fxd-r : row,
        fxd-rr: row-reverse,
      ),
      flex-wrap: (
        fxw-w : wrap,
        fxw-n : nowrap,
        fxw-wr: wrap-reverse,
      ),
      align-content: (
        ac-fs: flex-start,
        ac-fe: flex-end,
        ac-c : center,
        ac-s : stretch,
        ac-sa: space-around,
        ac-sb: space-between,
      ),
      align-items: (
        ai-fs: flex-start,
        ai-fe: flex-end,
        ai-c : center,
        ai-s : stretch,
        ai-b : baseline,
      ),
      align-self: (
        as-a : auto,
        as-fs: flex-start,
        as-fe: flex-end,
        as-c : center,
        as-s : stretch,
        as-b : baseline,
      ),
      justify-content: (
        jc-fs: flex-start,
        jc-fe: flex-end,
        jc-c : center,
        jc-sa: space-around,
        jc-sb: space-between,
        jc-se: space-evenly,
      ),
    );
  }

  $classes: map-merge($text-align , $vertical-align);
  $classes: map-merge($classes , $flex-align);
  @include generate-selectors-by-map($classes, $breakpoint);
}

@mixin generate-float ($breakpoint: null) {

  $classes: (
    float: (
      fl-n: none,
      fl-l: left,
      fl-r: right
    )
  );

  @include generate-selectors-by-map($classes, $breakpoint);
}

@mixin generate-cursor ($breakpoint: null) {

  $classes: (
    cursor: (
      cur-a : auto,
      cur-d : default,
      cur-c : crosshair,
      cur-ha: hand,
      cur-he: help,
      cur-m : move,
      cur-p : pointer,
      cur-t : text,
    )
  );

  @include generate-selectors-by-map($classes, $breakpoint);
}

@mixin generate-display ($breakpoint: null) {

  $classes: (
    display: (
      d-n : none,
      d-b : block,
      d-i : inline,
      d-ib: inline-block,
    )
  );

  @if not($float-layout) {
    $display-map: map-get($classes, display);
    $display-map: map-set($display-map, d-f, flex);
    $display-map: map-set($display-map, d-if, inline-flex);
    $classes: map-set($classes, display, $display-map);
  }

  @include generate-selectors-by-map($classes, $breakpoint);
}

@mixin generate-overflow ($breakpoint: null) {

  $classes: (
    overflow: (
      ov  : hidden,
      ov-v: visible,
      ov-h: hidden,
      ov-s: scroll,
      ov-a: auto,
    ),
    overflow-x: (
      ovx  : hidden,
      ovx-v: visible,
      ovx-h: hidden,
      ovx-s: scroll,
      ovx-a: auto,
    ),
    overflow-y: (
      ovy  : hidden,
      ovy-v: visible,
      ovy-h: hidden,
      ovy-s: scroll,
      ovy-a: auto,
    ),
  );

  @include generate-selectors-by-map($classes, $breakpoint);
}

@mixin generate-position ($breakpoint: null) {

  $classes: (
    position: (
      pos-s: static,
      pos-a: absolute,
      pos-r: relative,
      pos-f: fixed,
    )
  );

  @include generate-selectors-by-map($classes, $breakpoint);
}

@mixin generate-visibility ($breakpoint: null) {

  $classes: (
    visibility: (
      v-v: visible,
      v-h: hidden,
      v-c: collapse,
    )
  );

  @include generate-selectors-by-map($classes, $breakpoint);
}

@mixin generate-writing-mode ($breakpoint: null) {

  $classes: (
    writing-mode: (
      wm: lr-tb horizontal-tb,
      wm-lrt: lr-tb horizontal-tb,
      wm-tbl: tb-lr vertical-lr,
      wm-thr: tb-rl vertical-rl,
    )
  );

  @include generate-selectors-by-map($classes, $breakpoint);
}

@mixin breakpoint-up ($breakpoint) {
  $breakpoint: get-breakpoint($breakpoint);
  $media-queries: '#{$media-queries-prefix} (min-width: #{$breakpoint})';
  @media #{$media-queries} {
    @content;
  }
}

@mixin breakpoint-down ($breakpoint) {
  $breakpoint: get-breakpoint($breakpoint);
  $media-queries: '#{$media-queries-prefix} (max-width: #{$breakpoint})';
  @media #{$media-queries} {
    @content;
  }
}

@mixin breakpoint-between ($begin, $end) {
  $begin: get-breakpoint($begin);
  $end: get-breakpoint($end);
  $media-queries: '#{$media-queries-prefix} (min-width: #{$begin}) and (max-width: #{$end})';
  @media #{$media-queries} {
    @content;
  }
}

@mixin generate-selectors-by-map ($classes: (), $breakpoint: null) {
  @each $property, $map in $classes {
    @each $key, $value in $map {
      $selectors: get-selectors-by-name($key, $breakpoint);
      #{$selectors} {
        @each $v in $value {
          #{$property}: #{$v};
        }
      }
    }
  }
}

@mixin generate-media-queries ($breakpoint: null) {
  $breakpoint: get-breakpoint($breakpoint);
  $index: str-index($media-queries, $media-queries-placeholder);
  $placeholder-length: str-length($media-queries-placeholder);
  $prefix: str-slice($media-queries, 1, $index - 1);
  $suffix: str-slice($media-queries, $index + $placeholder-length, str-length($media-queries));
  $media-queries: $prefix + $breakpoint + $suffix;
  @media #{$media-queries} {
    @content;
  }
}

@mixin generate-range-media-queries ($breakpoint: null) {
  $minOf: str-index($media-queries, 'min-width');
  $maxOf: str-index($media-queries, 'max-width');
  $keys: map-keys($breakpoints);
  $index: index($keys, $breakpoint);
  $len: length($keys);
  @if ($minOf) {
    $begin: get-breakpoint($breakpoint);
    @if ($index == $len) {
      @include breakpoint-up($begin) { @content; }
    } @else {
      $end: get-breakpoint(nth($keys, $index + 1));
      @include breakpoint-between($begin, ($end - 0.001)) { @content; }
    }
  } @else {
    $end: get-breakpoint($breakpoint);
    @if ($index == 1) {
      @include breakpoint-down($end) { @content; }
    } @else {
      $begin: get-breakpoint(nth($keys, $index - 1));
      @include breakpoint-between(($begin + 0.001), $end) { @content; }
    }
  }
}

@mixin clearfix () {
  &::after {
    content: '';
    display: block;
    clear  : both;
  }
}
